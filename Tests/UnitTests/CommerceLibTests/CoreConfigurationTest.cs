// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Mediachase.Commerce.Core;
using System.IO;
using System.Xml;
namespace UnitTests
{
    /// <summary>
    ///This is a test class for Mediachase.Commerce.Core.CoreConfiguration and is intended
    ///to contain all Mediachase.Commerce.Core.CoreConfiguration Unit Tests
    ///</summary>
    [TestClass()]
    public class CoreConfigurationTest
    {


        private TestContext testContextInstance;

        /// <summary>
        /// Gets or sets the test context which provides
        /// information about and functionality for the current test run.
        /// </summary>
        /// <value>The test context.</value>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        /// <summary>
        /// Tests whether connection is set up properly.
        /// </summary>
        [TestMethod()]
        public void CoreConfiguration_UnitTest_Connection()
        {
            CoreConfiguration target = CoreConfiguration.Instance;
            
            // Eventually expand test
            //string val = "foo";
            //Assert.AreNotEqual(val, target.Connection.AppDatabase, "Mediachase.Commerce.Core.CoreConfiguration.Connection was not set correctly.");
            //val = "EcfSqlConnection";
            //Assert.AreEqual(val, target.Connection.ConnectionStringName);

            Assert.IsNotNull(target.Connection.AppDatabase, "Mediachase.Commerce.Core.CoreConfiguration.Connection was not set correctly.");
        }

        /*
        /// <summary>
        /// Reads the connection string from file.
        /// </summary>
        /// <param name="connStringName">Name of the conn string.</param>
        /// <returns></returns>
        private string readConnStringFromFile(string connStringName)
        {
            // For the time being, hardcode expected connection string value
            XmlReaderSettings settings = new XmlReaderSettings();
            settings.ConformanceLevel = ConformanceLevel.Fragment;
            settings.IgnoreWhitespace = true;
            settings.IgnoreComments = true;
            XmlReader reader = XmlReader.Create("connetionStrings.config", settings);
            reader.Read();
            reader.ReadStartElement("connectionStrings");
            reader.ReadToDescendant("add");
            {
                reader.MoveToNextAttribute()
            }
            return connString;
        }
         */

        /// <summary>
        /// Tests whether cache is enabled.
        /// </summary>
        [TestMethod()]
        public void CoreConfiguration_UnitTest_Cache()
        {
            CoreConfiguration target = CoreConfiguration.Instance;
            Assert.AreEqual(false, target.CacheConfig.IsEnabled, "Mediachase.Commerce.Core.CoreConfiguration.Connection was not set correctly.");
            //Assert.Inconclusive("Verify correctness of this test");
        }

        /// <summary>
        /// Tests that the default application name is set up correctly.
        /// </summary>
        [TestMethod()]
        public void CoreConfiguration_UnitTest_DefaultApplicationName()
        {
            CoreConfiguration target = CoreConfiguration.Instance;
            Assert.AreNotEqual("Microsoft", target.DefaultApplicationName, 
                "Mediachase.Commerce.Core.CoreConfiguration.DefaultApplicationName was not set correctly.");

            Assert.IsNotNull(target.DefaultApplicationName, "Mediachase.Commerce.Core.CoreConfiguration.DefaultApplicationName was not set correctly.");

            // Change "eCommerceFramework" to appropriate application name
            Assert.AreEqual("eCommerceFramework", target.DefaultApplicationName,
                "Mediachase.Commerce.Core.CoreConfiguration.DefaultApplicationName was not set correctly.");

        }
    }
}
