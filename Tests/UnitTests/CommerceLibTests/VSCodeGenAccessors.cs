// ------------------------------------------------------------------------------
//<autogenerated>
//        This code was generated by Microsoft Visual Studio Team System 2005.
//
//        Changes to this file may cause incorrect behavior and will be lost if
//        the code is regenerated.
//</autogenerated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace UnitTests
{
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class BaseAccessor {
    
    protected Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject m_privateObject;
    
    protected BaseAccessor(object target, Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) {
        m_privateObject = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type);
    }
    
    protected BaseAccessor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) : 
            this(null, type) {
    }
    
    internal virtual object Target {
        get {
            return m_privateObject.Target;
        }
    }
    
    public override string ToString() {
        return this.Target.ToString();
    }
    
    public override bool Equals(object obj) {
        if (typeof(BaseAccessor).IsInstanceOfType(obj)) {
            obj = ((BaseAccessor)(obj)).Target;
        }
        return this.Target.Equals(obj);
    }
    
    public override int GetHashCode() {
        return this.Target.GetHashCode();
    }
}


[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Mediachase_Commerce_Profile_ProfileConfigurationAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::Mediachase.Commerce.Profile.ProfileConfiguration));
    
    internal Mediachase_Commerce_Profile_ProfileConfigurationAccessor(global::Mediachase.Commerce.Profile.ProfileConfiguration target) : 
            base(target, m_privateType) {
    }
    
    internal static global::Mediachase.Commerce.Profile.ProfileConfiguration _instance {
        get {
            global::Mediachase.Commerce.Profile.ProfileConfiguration ret = ((global::Mediachase.Commerce.Profile.ProfileConfiguration)(m_privateType.GetStaticField("_instance")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("_instance", value);
        }
    }
    
    internal static object _lockObject {
        get {
            object ret = ((object)(m_privateType.GetStaticField("_lockObject")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("_lockObject", value);
        }
    }
    
    internal static global::Mediachase.Commerce.Profile.ProfileConfiguration CreatePrivate() {
        object[] args = new object[0];
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(typeof(global::Mediachase.Commerce.Profile.ProfileConfiguration), new System.Type[0], args);
        return ((global::Mediachase.Commerce.Profile.ProfileConfiguration)(priv_obj.Target));
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Mediachase_Commerce_Core_CoreConfigurationAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::Mediachase.Commerce.Core.CoreConfiguration));
    
    internal Mediachase_Commerce_Core_CoreConfigurationAccessor(global::Mediachase.Commerce.Core.CoreConfiguration target) : 
            base(target, m_privateType) {
    }
    
    internal static global::Mediachase.Commerce.Core.CoreConfiguration _instance {
        get {
            global::Mediachase.Commerce.Core.CoreConfiguration ret = ((global::Mediachase.Commerce.Core.CoreConfiguration)(m_privateType.GetStaticField("_instance")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("_instance", value);
        }
    }
    
    internal static object _lockObject {
        get {
            object ret = ((object)(m_privateType.GetStaticField("_lockObject")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("_lockObject", value);
        }
    }
    
    internal static global::Mediachase.Commerce.Core.CoreConfiguration CreatePrivate() {
        object[] args = new object[0];
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(typeof(global::Mediachase.Commerce.Core.CoreConfiguration), new System.Type[0], args);
        return ((global::Mediachase.Commerce.Core.CoreConfiguration)(priv_obj.Target));
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Mediachase_Cms_ImportExport_ImportExportHelperAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::Mediachase.Cms.ImportExport.ImportExportHelper));
    
    internal Mediachase_Cms_ImportExport_ImportExportHelperAccessor(global::Mediachase.Cms.ImportExport.ImportExportHelper target) : 
            base(target, m_privateType) {
    }
    
    internal static global::Mediachase.Cms.ImportExport.ImportExportHelper _Instance {
        get {
            global::Mediachase.Cms.ImportExport.ImportExportHelper ret = ((global::Mediachase.Cms.ImportExport.ImportExportHelper)(m_privateType.GetStaticField("_Instance")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("_Instance", value);
        }
    }
    
    internal static global::Mediachase.Cms.ImportExport.ImportExportHelper CreatePrivate() {
        object[] args = new object[0];
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(typeof(global::Mediachase.Cms.ImportExport.ImportExportHelper), new System.Type[0], args);
        return ((global::Mediachase.Cms.ImportExport.ImportExportHelper)(priv_obj.Target));
    }
    
    internal void WriteMenuItem(global::System.Xml.XmlWriter writer, global::Mediachase.Cms.Dto.MenuDto menuDto, global::Mediachase.Cms.Dto.MenuDto.MenuItemRow itemRow) {
        object[] args = new object[] {
                writer,
                menuDto,
                itemRow};
        m_privateObject.Invoke("WriteMenuItem", new System.Type[] {
                    typeof(global::System.Xml.XmlWriter),
                    typeof(global::Mediachase.Cms.Dto.MenuDto),
                    typeof(global::Mediachase.Cms.Dto.MenuDto.MenuItemRow)}, args);
    }
    
    internal void WriteFolderPage(global::System.Xml.XmlWriter writer, global::System.Data.IDataReader reader) {
        object[] args = new object[] {
                writer,
                reader};
        m_privateObject.Invoke("WriteFolderPage", new System.Type[] {
                    typeof(global::System.Xml.XmlWriter),
                    typeof(global::System.Data.IDataReader)}, args);
    }
    
    internal void WriteFolder(global::System.Xml.XmlWriter writer, global::System.Data.IDataReader reader) {
        object[] args = new object[] {
                writer,
                reader};
        m_privateObject.Invoke("WriteFolder", new System.Type[] {
                    typeof(global::System.Xml.XmlWriter),
                    typeof(global::System.Data.IDataReader)}, args);
    }
    
    internal void WriteFolderPageCommon(global::System.Xml.XmlWriter writer, global::System.Data.IDataReader reader) {
        object[] args = new object[] {
                writer,
                reader};
        m_privateObject.Invoke("WriteFolderPageCommon", new System.Type[] {
                    typeof(global::System.Xml.XmlWriter),
                    typeof(global::System.Data.IDataReader)}, args);
    }
    
    internal void WriteAccessRoles(global::System.Xml.XmlWriter writer, int pageId) {
        object[] args = new object[] {
                writer,
                pageId};
        m_privateObject.Invoke("WriteAccessRoles", new System.Type[] {
                    typeof(global::System.Xml.XmlWriter),
                    typeof(int)}, args);
    }
    
    internal void WritePage(global::System.Xml.XmlWriter writer, global::System.Data.IDataReader reader) {
        object[] args = new object[] {
                writer,
                reader};
        m_privateObject.Invoke("WritePage", new System.Type[] {
                    typeof(global::System.Xml.XmlWriter),
                    typeof(global::System.Data.IDataReader)}, args);
    }
    
    internal void WritePageVersions(global::System.Xml.XmlWriter writer, int pageId) {
        object[] args = new object[] {
                writer,
                pageId};
        m_privateObject.Invoke("WritePageVersions", new System.Type[] {
                    typeof(global::System.Xml.XmlWriter),
                    typeof(int)}, args);
    }
    
    internal string GetLanguageCode(int languageId) {
        object[] args = new object[] {
                languageId};
        string ret = ((string)(m_privateObject.Invoke("GetLanguageCode", new System.Type[] {
                    typeof(int)}, args)));
        return ret;
    }
    
    internal string GetTemplateName(int templateId) {
        object[] args = new object[] {
                templateId};
        string ret = ((string)(m_privateObject.Invoke("GetTemplateName", new System.Type[] {
                    typeof(int)}, args)));
        return ret;
    }
    
    internal string GetUserName(global::System.Guid userId) {
        object[] args = new object[] {
                userId};
        string ret = ((string)(m_privateObject.Invoke("GetUserName", new System.Type[] {
                    typeof(global::System.Guid)}, args)));
        return ret;
    }
    
    internal string GetStatusName(int statusId) {
        object[] args = new object[] {
                statusId};
        string ret = ((string)(m_privateObject.Invoke("GetStatusName", new System.Type[] {
                    typeof(int)}, args)));
        return ret;
    }
    
    internal string GetStateName(int stateId) {
        object[] args = new object[] {
                stateId};
        string ret = ((string)(m_privateObject.Invoke("GetStateName", new System.Type[] {
                    typeof(int)}, args)));
        return ret;
    }
    
    internal string GetCommandTypeName(string commandType) {
        object[] args = new object[] {
                commandType};
        string ret = ((string)(m_privateObject.Invoke("GetCommandTypeName", new System.Type[] {
                    typeof(string)}, args)));
        return ret;
    }
    
    internal string ConvertDBValueToStringSafe(object val) {
        object[] args = new object[] {
                val};
        string ret = ((string)(m_privateObject.Invoke("ConvertDBValueToStringSafe", new System.Type[] {
                    typeof(object)}, args)));
        return ret;
    }
    
    internal void ProcessSite(global::System.Xml.XmlReader reader, global::System.Guid appId, bool overwriteExisting) {
        object[] args = new object[] {
                reader,
                appId,
                overwriteExisting};
        m_privateObject.Invoke("ProcessSite", new System.Type[] {
                    typeof(global::System.Xml.XmlReader),
                    typeof(global::System.Guid),
                    typeof(bool)}, args);
    }
    
    internal bool ProcessNextSiteNode(global::System.Xml.XmlReader reader, global::Mediachase.Cms.Dto.SiteDto dto, global::Mediachase.Cms.Dto.SiteDto.SiteRow row) {
        object[] args = new object[] {
                reader,
                dto,
                row};
        bool ret = ((bool)(m_privateObject.Invoke("ProcessNextSiteNode", new System.Type[] {
                    typeof(global::System.Xml.XmlReader),
                    typeof(global::Mediachase.Cms.Dto.SiteDto),
                    typeof(global::Mediachase.Cms.Dto.SiteDto.SiteRow)}, args)));
        return ret;
    }
    
    internal void AddDomainInfo(global::System.Xml.XmlReader reader, global::Mediachase.Cms.Dto.SiteDto.SiteRow row) {
        object[] args = new object[] {
                reader,
                row};
        m_privateObject.Invoke("AddDomainInfo", new System.Type[] {
                    typeof(global::System.Xml.XmlReader),
                    typeof(global::Mediachase.Cms.Dto.SiteDto.SiteRow)}, args);
    }
    
    internal void AddAttributes(global::System.Xml.XmlReader reader, global::Mediachase.Cms.Dto.SiteDto dto, global::System.Guid siteId, global::Mediachase.Cms.Dto.SiteDto.SiteRow siteRow) {
        object[] args = new object[] {
                reader,
                dto,
                siteId,
                siteRow};
        m_privateObject.Invoke("AddAttributes", new System.Type[] {
                    typeof(global::System.Xml.XmlReader),
                    typeof(global::Mediachase.Cms.Dto.SiteDto),
                    typeof(global::System.Guid),
                    typeof(global::Mediachase.Cms.Dto.SiteDto.SiteRow)}, args);
    }
    
    internal void AddMenus(global::System.Xml.XmlReader reader, global::System.Guid siteId) {
        object[] args = new object[] {
                reader,
                siteId};
        m_privateObject.Invoke("AddMenus", new System.Type[] {
                    typeof(global::System.Xml.XmlReader),
                    typeof(global::System.Guid)}, args);
    }
    
    internal bool AddMenu(global::System.Xml.XmlReader reader, global::System.Guid siteId) {
        object[] args = new object[] {
                reader,
                siteId};
        bool ret = ((bool)(m_privateObject.Invoke("AddMenu", new System.Type[] {
                    typeof(global::System.Xml.XmlReader),
                    typeof(global::System.Guid)}, args)));
        return ret;
    }
    
    internal void AddMenuItems(global::System.Xml.XmlReader reader, global::Mediachase.Cms.Dto.MenuDto dto, int menuId, int level, System.Nullable<int> parentId) {
        object[] args = new object[] {
                reader,
                dto,
                menuId,
                level,
                parentId};
        m_privateObject.Invoke("AddMenuItems", new System.Type[] {
                    typeof(global::System.Xml.XmlReader),
                    typeof(global::Mediachase.Cms.Dto.MenuDto),
                    typeof(int),
                    typeof(int),
                    typeof(System.Nullable<int>)}, args);
    }
    
    internal void AddMenuItems(global::System.Xml.XmlReader reader, global::Mediachase.Cms.Dto.MenuDto dto, int menuId, int level) {
        object[] args = new object[] {
                reader,
                dto,
                menuId,
                level};
        m_privateObject.Invoke("AddMenuItems", new System.Type[] {
                    typeof(global::System.Xml.XmlReader),
                    typeof(global::Mediachase.Cms.Dto.MenuDto),
                    typeof(int),
                    typeof(int)}, args);
    }
    
    internal void AddMenuItem(global::System.Xml.XmlReader reader, global::Mediachase.Cms.Dto.MenuDto dto, int menuId, int level) {
        object[] args = new object[] {
                reader,
                dto,
                menuId,
                level};
        m_privateObject.Invoke("AddMenuItem", new System.Type[] {
                    typeof(global::System.Xml.XmlReader),
                    typeof(global::Mediachase.Cms.Dto.MenuDto),
                    typeof(int),
                    typeof(int)}, args);
    }
    
    internal static void SetSiteItemRowDefaults(global::Mediachase.Cms.Dto.SiteDto.SiteRow row) {
        object[] args = new object[] {
                row};
        m_privateType.InvokeStatic("SetSiteItemRowDefaults", new System.Type[] {
                    typeof(global::Mediachase.Cms.Dto.SiteDto.SiteRow)}, args);
    }
    
    internal static void SetMenuItemRowDefaults(int level, global::Mediachase.Cms.Dto.MenuDto.MenuItemRow row) {
        object[] args = new object[] {
                level,
                row};
        m_privateType.InvokeStatic("SetMenuItemRowDefaults", new System.Type[] {
                    typeof(int),
                    typeof(global::Mediachase.Cms.Dto.MenuDto.MenuItemRow)}, args);
    }
    
    internal bool processNextMenuItemProperty(global::System.Xml.XmlReader reader, global::Mediachase.Cms.Dto.MenuDto dto, global::Mediachase.Cms.Dto.MenuDto.MenuItemRow row, int menuId, int level) {
        object[] args = new object[] {
                reader,
                dto,
                row,
                menuId,
                level};
        bool ret = ((bool)(m_privateObject.Invoke("processNextMenuItemProperty", new System.Type[] {
                    typeof(global::System.Xml.XmlReader),
                    typeof(global::Mediachase.Cms.Dto.MenuDto),
                    typeof(global::Mediachase.Cms.Dto.MenuDto.MenuItemRow),
                    typeof(int),
                    typeof(int)}, args)));
        return ret;
    }
    
    internal void AddFolders(global::System.Xml.XmlReader reader, global::System.Guid siteId) {
        object[] args = new object[] {
                reader,
                siteId};
        m_privateObject.Invoke("AddFolders", new System.Type[] {
                    typeof(global::System.Xml.XmlReader),
                    typeof(global::System.Guid)}, args);
    }
    
    internal void AddFolderPageCommon(global::System.Xml.XmlReader reader, global::UnitTests.Mediachase_Cms_ImportExport_ImportExportHelper_CMSCommonAccessor folderPage, global::System.Guid siteId, int outlineLevel, global::System.Guid parentId) {
        object folderPage_val_target = null;
        if ((folderPage != null)) {
            folderPage_val_target = folderPage.Target;
        }
        object[] args = new object[] {
                reader,
                folderPage_val_target,
                siteId,
                outlineLevel,
                parentId};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Mediachase.Cms", "Mediachase.Cms.ImportExport.ImportExportHelper+CMSCommon");
        m_privateObject.Invoke("AddFolderPageCommon", new System.Type[] {
                    typeof(global::System.Xml.XmlReader),
                    target.ReferencedType,
                    typeof(global::System.Guid),
                    typeof(int),
                    typeof(global::System.Guid)}, args);
    }
    
    internal void AddPageAttributes(global::System.Xml.XmlReader reader, global::UnitTests.Mediachase_Cms_ImportExport_ImportExportHelper_CMSPageAccessor page) {
        object page_val_target = null;
        if ((page != null)) {
            page_val_target = page.Target;
        }
        object[] args = new object[] {
                reader,
                page_val_target};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Mediachase.Cms", "Mediachase.Cms.ImportExport.ImportExportHelper+CMSPage");
        m_privateObject.Invoke("AddPageAttributes", new System.Type[] {
                    typeof(global::System.Xml.XmlReader),
                    target.ReferencedType}, args);
    }
    
    internal void AddRoles(global::System.Xml.XmlReader reader, global::UnitTests.Mediachase_Cms_ImportExport_ImportExportHelper_CMSCommonAccessor folderPage) {
        object folderPage_val_target = null;
        if ((folderPage != null)) {
            folderPage_val_target = folderPage.Target;
        }
        object[] args = new object[] {
                reader,
                folderPage_val_target};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Mediachase.Cms", "Mediachase.Cms.ImportExport.ImportExportHelper+CMSCommon");
        m_privateObject.Invoke("AddRoles", new System.Type[] {
                    typeof(global::System.Xml.XmlReader),
                    target.ReferencedType}, args);
    }
    
    internal void AddVersions(global::System.Xml.XmlReader reader, global::UnitTests.Mediachase_Cms_ImportExport_ImportExportHelper_CMSPageAccessor page) {
        object page_val_target = null;
        if ((page != null)) {
            page_val_target = page.Target;
        }
        object[] args = new object[] {
                reader,
                page_val_target};
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType target = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Mediachase.Cms", "Mediachase.Cms.ImportExport.ImportExportHelper+CMSPage");
        m_privateObject.Invoke("AddVersions", new System.Type[] {
                    typeof(global::System.Xml.XmlReader),
                    target.ReferencedType}, args);
    }
    
    internal int GetCommandTypeNumber(global::System.Xml.XmlReader reader) {
        object[] args = new object[] {
                reader};
        int ret = ((int)(m_privateObject.Invoke("GetCommandTypeNumber", new System.Type[] {
                    typeof(global::System.Xml.XmlReader)}, args)));
        return ret;
    }
    
    internal string ReadElementValue(global::System.Xml.XmlReader reader, string defaultValue) {
        object[] args = new object[] {
                reader,
                defaultValue};
        string ret = ((string)(m_privateObject.Invoke("ReadElementValue", new System.Type[] {
                    typeof(global::System.Xml.XmlReader),
                    typeof(string)}, args)));
        return ret;
    }
    
    internal string ReadAttributeValue(global::System.Xml.XmlReader reader, string name, string defaultValue) {
        object[] args = new object[] {
                reader,
                name,
                defaultValue};
        string ret = ((string)(m_privateObject.Invoke("ReadAttributeValue", new System.Type[] {
                    typeof(global::System.Xml.XmlReader),
                    typeof(string),
                    typeof(string)}, args)));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Mediachase_Cms_ImportExport_ImportExportHelper_CMSCommonAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Mediachase.Cms", "Mediachase.Cms.ImportExport.ImportExportHelper+CMSCommon");
    
    internal Mediachase_Cms_ImportExport_ImportExportHelper_CMSCommonAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal string _name {
        get {
            string ret = ((string)(m_privateObject.GetField("_name")));
            return ret;
        }
        set {
            m_privateObject.SetField("_name", value);
        }
    }
    
    internal bool _isPublic {
        get {
            bool ret = ((bool)(m_privateObject.GetField("_isPublic")));
            return ret;
        }
        set {
            m_privateObject.SetField("_isPublic", value);
        }
    }
    
    internal bool _isFolder {
        get {
            bool ret = ((bool)(m_privateObject.GetField("_isFolder")));
            return ret;
        }
        set {
            m_privateObject.SetField("_isFolder", value);
        }
    }
    
    internal bool _isDefault {
        get {
            bool ret = ((bool)(m_privateObject.GetField("_isDefault")));
            return ret;
        }
        set {
            m_privateObject.SetField("_isDefault", value);
        }
    }
    
    internal int _sortOrder {
        get {
            int ret = ((int)(m_privateObject.GetField("_sortOrder")));
            return ret;
        }
        set {
            m_privateObject.SetField("_sortOrder", value);
        }
    }
    
    internal int _outlineLevel {
        get {
            int ret = ((int)(m_privateObject.GetField("_outlineLevel")));
            return ret;
        }
        set {
            m_privateObject.SetField("_outlineLevel", value);
        }
    }
    
    internal global::System.Guid _siteId {
        get {
            global::System.Guid ret = ((global::System.Guid)(m_privateObject.GetField("_siteId")));
            return ret;
        }
        set {
            m_privateObject.SetField("_siteId", value);
        }
    }
    
    internal string[] _roles {
        get {
            string[] ret = ((string[])(m_privateObject.GetField("_roles")));
            return ret;
        }
        set {
            m_privateObject.SetField("_roles", value);
        }
    }
    
    internal string _masterPage {
        get {
            string ret = ((string)(m_privateObject.GetField("_masterPage")));
            return ret;
        }
        set {
            m_privateObject.SetField("_masterPage", value);
        }
    }
    
    internal int _id {
        get {
            int ret = ((int)(m_privateObject.GetField("_id")));
            return ret;
        }
        set {
            m_privateObject.SetField("_id", value);
        }
    }
    
    internal global::System.Guid _internalId {
        get {
            global::System.Guid ret = ((global::System.Guid)(m_privateObject.GetField("_internalId")));
            return ret;
        }
        set {
            m_privateObject.SetField("_internalId", value);
        }
    }
    
    internal global::System.Guid _parentId {
        get {
            global::System.Guid ret = ((global::System.Guid)(m_privateObject.GetField("_parentId")));
            return ret;
        }
        set {
            m_privateObject.SetField("_parentId", value);
        }
    }
    
    internal void Save() {
        object[] args = new object[0];
        m_privateObject.Invoke("Save", new System.Type[0], args);
    }
    
    internal static object CreatePrivate() {
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Mediachase.Cms", "Mediachase.Cms.ImportExport.ImportExportHelper+CMSCommon", new object[0]);
        return priv_obj.Target;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Mediachase_Cms_ImportExport_ImportExportHelper_CMSPageAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Mediachase.Cms", "Mediachase.Cms.ImportExport.ImportExportHelper+CMSPage");
    
    internal Mediachase_Cms_ImportExport_ImportExportHelper_CMSPageAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal string _title {
        get {
            string ret = ((string)(m_privateObject.GetField("_title")));
            return ret;
        }
        set {
            m_privateObject.SetField("_title", value);
        }
    }
    
    internal string _keywords {
        get {
            string ret = ((string)(m_privateObject.GetField("_keywords")));
            return ret;
        }
        set {
            m_privateObject.SetField("_keywords", value);
        }
    }
    
    internal string _description {
        get {
            string ret = ((string)(m_privateObject.GetField("_description")));
            return ret;
        }
        set {
            m_privateObject.SetField("_description", value);
        }
    }
    
    internal static object CreatePrivate() {
        object[] args = new object[0];
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Mediachase.Cms", "Mediachase.Cms.ImportExport.ImportExportHelper+CMSPage", new System.Type[0], args);
        return priv_obj.Target;
    }
}
}
